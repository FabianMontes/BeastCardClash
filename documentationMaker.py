import os
import pathlib
import google.generativeai as genai

import sys


# === CONFIGURACI√ìN ===
API_KEY = os.getenv("GEMINI_API_KEY")  # Lee la clave desde una variable de entorno
EXTENSIONS = {".cs"}  # Solo archivos C#
SCAN_DIR = "Assets"  # Directorio a escanear
EXCLUDED_DIRS = {
    ".git",
    ".vscode",
    "Packages",
    "Library",
    "TutorialInfo",
}  # Directorios a excluir
OUTPUT_DIR = "Docs"
MODEL_NAME = "gemini-2.5-flash"

# Variable global para el contexto del README
README_CONTEXT = ""

# === INICIALIZACI√ìN ===
if not API_KEY:
    print("‚ùå Error: La variable de entorno GEMINI_API_KEY no est√° configurada.")
    print("Por favor, config√∫rala con tu clave de API de Google Generative AI.")
    sys.exit(1)  # Termina el script si la clave no existe

genai.configure(api_key=API_KEY)
model = genai.GenerativeModel(MODEL_NAME)

# === UTILIDADES ===


def es_codigo_valido(path: pathlib.Path) -> bool:
    return path.suffix in EXTENSIONS


def obtener_archivos_codigo(scan_root: str):
    for dirpath, dirnames, filenames in os.walk(scan_root):
        # Elimina carpetas excluidas del recorrido
        dirnames[:] = [d for d in dirnames if d not in EXCLUDED_DIRS]
        for file in filenames:
            ruta = pathlib.Path(dirpath) / file
            if es_codigo_valido(ruta):
                yield ruta


def generar_documentacion_para_archivo(archivo: pathlib.Path, base_dir: pathlib.Path):
    try:
        with open(archivo, "r", encoding="utf-8") as f:
            contenido = f.read()
    except Exception as e:
        print(f"‚ùå Error leyendo {archivo}: {e}")
        return

    # Construye la secci√≥n de contexto si el README fue cargado
    contexto_readme_str = ""
    if README_CONTEXT:
        contexto_readme_str = f"""**Contexto General del Proyecto (extra√≠do del README.md):**
---
{README_CONTEXT}
---

"""
    prompt = f"""{contexto_readme_str}

Act√∫a como un ingeniero de software senior documentando c√≥digo para un nuevo miembro del equipo en un proyecto de Unity llamado "BeastCardClash".

Tu tarea es generar una documentaci√≥n t√©cnica clara, concisa y bien estructurada en formato Markdown (GFM) para el siguiente archivo de c√≥digo C#.

Sigue esta estructura estrictamente:

# `{archivo.name}`

## 1. Prop√≥sito General
Describe en 1-2 frases el rol principal de este script dentro del juego. ¬øQu√© gestiona? ¬øCon qu√© otros sistemas principales interact√∫a?

## 2. Componentes Clave
Enumera y explica las clases, structs o enums m√°s importantes definidos en el archivo. Para cada clase principal:

### [Nombre de la Clase]
- **Descripci√≥n:** Una explicaci√≥n detallada de lo que hace la clase. Si hereda de `MonoBehaviour`, menci√≥nalo.
- **Variables P√∫blicas / Serializadas:** Lista las variables m√°s importantes que son visibles en el Inspector de Unity (`[SerializeField]`) o p√∫blicas. Explica para qu√© se usa cada una.
- **M√©todos Principales:**
    - `void MetodoImportante(parametro)`: Describe qu√© hace el m√©todo, qu√© significan sus par√°metros y qu√© devuelve (si aplica). Presta especial atenci√≥n a los m√©todos del ciclo de vida de Unity (`Awake`, `Start`, `Update`, `FixedUpdate`, etc.).
- **L√≥gica Clave:** Si hay alg√∫n algoritmo, m√°quina de estados o flujo de trabajo complejo, expl√≠calo aqu√≠ de forma sencilla.

## 3. Dependencias y Eventos
- **Componentes Requeridos:** Menciona si este script usa `[RequireComponent(typeof(UnComponente))]`.
- **Eventos (Entrada):** ¬øA qu√© eventos se suscribe este script? (Ej: `button.onClick.AddListener(...)`).
- **Eventos (Salida):** ¬øEste script invoca alg√∫n evento (`UnityEvent`, `Action`, etc.) para notificar a otros sistemas?

---

**Instrucciones Adicionales:**
- **Precisi√≥n:** Basa tu documentaci√≥n √∫nicamente en el c√≥digo proporcionado. No inventes funcionalidades.
- **Claridad:** Usa un lenguaje claro y directo. Evita la jerga innecesaria.
- **Fragmentos de C√≥digo:** Incluye peque√±os fragmentos de c√≥digo relevantes para ilustrar tus explicaciones, pero no copies funciones enteras a menos que sea crucial.
- **Llano**: Usa un formato simple, con menos listas y m√°s p√°rrafos explicativos.

Aqu√≠ est√° el archivo a documentar:

```{archivo.suffix[1:]}
{contenido}
```
"""

    try:
        respuesta = model.generate_content(prompt)
        texto = respuesta.text
    except Exception as e:
        print(f"‚ùå Error inesperado con Gemini al procesar {archivo}: {e}")
        return

    # Ruta de salida
    salida = pathlib.Path(OUTPUT_DIR) / archivo.relative_to(base_dir)
    salida = salida.with_suffix(salida.suffix + ".md")
    salida.parent.mkdir(parents=True, exist_ok=True)

    try:
        with open(salida, "w", encoding="utf-8") as f:
            f.write(texto)
        print(f"‚úÖ Documentado: {archivo} ‚Üí {salida}")
    except Exception as e:
        print(f"‚ùå Error guardando archivo {salida}: {e}")


# === PROGRAMA PRINCIPAL ===


def main():
    global README_CONTEXT  # Indica que vamos a modificar la variable global
    repo_root = pathlib.Path(".").resolve()
    scan_path = repo_root / SCAN_DIR
    readme_path = repo_root / "README.md"

    # Carga el contenido del README en la variable global
    if readme_path.is_file():
        try:
            with open(readme_path, "r", encoding="utf-8") as f:
                README_CONTEXT = f.read()
            print("‚ÑπÔ∏è  Contexto del README.md cargado.")
        except Exception as e:
            print(f"‚ö†Ô∏è  No se pudo leer el archivo README.md: {e}")
    else:
        print("‚ÑπÔ∏è  No se encontr√≥ README.md, continuando sin contexto adicional.")

    if not scan_path.is_dir():
        print(f"‚ùå El directorio a escanear no existe: {scan_path}")
        return

    print(f"üìÅ Escaneando: {scan_path}")
    for archivo in obtener_archivos_codigo(scan_path):
        generar_documentacion_para_archivo(
            archivo, repo_root
        )  # La llamada es m√°s simple


if __name__ == "__main__":
    main()
